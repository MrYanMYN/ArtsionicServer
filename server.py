from flask import Flask, request, jsonify
from flask_cors import CORS, cross_origin
import json
import utils
import pipeline
import threading
import queue

app = Flask(__name__)
CORS(app)
regions = ['canada', 'united_states', 'united_kingdom']

trends = {}
images = {}
posts = {}

dataQueueImgs = queue.Queue()
dataQueuePosts = queue.Queue()
dataQueueTrends = queue.Queue()

@app.route('/getImgList', methods=['GET'])
def getImgList():
    global images
    try:
        while not dataQueueImgs.empty():
            new_images = dataQueueImgs.get()
            images.update(new_images)

        outgoing_imgs = {}
        for k, v in images.items():
            outgoing_imgs[k] = {
                'b64_img': images[k]['b64_img'],
                'trend': images[k]['trend'],
                'prompt': images[k]['prompt'],
                'date': images[k]['date'],
                'imagedata': ['2048 x 2048', 'DALL-E 3'],
            }

        return jsonify({'success': True, 'data': outgoing_imgs})
    except Exception as err:
        return jsonify({'success': False, 'message': f'Error starting task: {err}'})


@app.route('/getPostList', methods=['GET'])
def getPostList():
    global posts
    try:
        while not dataQueuePosts.empty():
            new_posts = dataQueuePosts.get()
            posts.update(new_posts)

        outgoing_posts = {}
        for k, v in posts.items():
            outgoing_posts[k] = {
                'b64_img': posts[k]['b64_img'],
                'trend': posts[k]['trend'],
                'date': posts[k]['date'],
                'prompt': posts[k]['prompt'],
                'description': posts[k]['description'],
                'hashtags': posts[k]['hashtags'],
                'title': posts[k]['name'],
                'imagedata': ['2048 x 2048', 'DALL-E 3'],
            }

        return jsonify({'success': True, 'data': outgoing_posts})
    except Exception as err:
        return jsonify({'success': False, 'message': f'Error starting task: {err}'})

@app.route('/getTrends', methods=['GET'])
def getTrends():
    trends = {}
    try:
        for region in regions:
            pulled_trends = utils.pull_trends(region)
            trends[region] = pulled_trends

        return jsonify({'success': True, 'data': trends})
    except Exception as err:
        return jsonify({'success': False, 'message': f'Error starting task: {err}', 'data': trends})


@app.route('/autoGenerateDaily', methods=['GET'])
def startImageGenFromTrends():
    global trends, images
    try:
        trends = {}
        processing_thread = threading.Thread(target=pipeline.autoDailyGeneratePicsPipeline, args=( regions, dataQueueImgs, ))
        processing_thread.start()
        return jsonify({'success': True, 'message': 'Starting task...'})
    except Exception as err:
        return jsonify({'success': False, 'message': f'Error starting task: {err}'})


@app.route('/generateImg', methods=['POST'])
def generateImg():
    #takes trend and generates img from it
    trend = request.json
    trend = json.dumps(trend)
    trend = json.loads(trend)
    trend = trend["trend"]

    try:
        processing_thread = threading.Thread(target=pipeline.generateImgPipeline, args=(trend, dataQueueImgs,))
        processing_thread.start()
        return jsonify({'success': True, 'message': 'Starting task...'})
    except Exception as err:
        return jsonify({'success': False, 'message': f'Error starting task: {err}'})

@app.route('/generatePost', methods=['POST'])
def generatePost():
    global images
    #takes image and generates post from it
    # NOT FINISHED!
    image_id = request.json
    image_id = json.dumps(image_id)
    image_id = json.loads(image_id)
    image_id = image_id["image_id"]

    try:
        processing_thread = threading.Thread(target=pipeline.generatePostPipeline, args=(images[image_id], dataQueuePosts, image_id))
        processing_thread.start()
        del images[image_id]
        return jsonify({'success': True, 'message': 'Starting task...'})
    except Exception as err:
        return jsonify({'success': False, 'message': f'Error starting task: {err}'})

@app.route('/uploadPost', methods=['POST'])
def uploadPost():
    #Uploads post
    post_id = request.json
    post_id = json.dumps(post_id)
    post_id = json.loads(post_id)
    post_id = post_id["post_id"]

    try:
        processing_thread = threading.Thread(target=pipeline.uploadPost, args=(posts[post_id]["imagePath"], posts[post_id]))
        processing_thread.start()
        del posts[post_id]
        return jsonify({'success': True, 'message': 'Starting task...'})
    except Exception as err:
        return jsonify({'success': False, 'message': f'Error starting task: {err}'})


app.run(port=7001)
